# 谈判原始清单-数据计算



# import pandas as pd
# import numpy as np
# import matplotlib as plt
# df = pd.DataFrame(np.random.randn(1000, 4), index=range(0,1000),columns=['A', 'B', 'C', 'D'])
# df = df.cumsum()
# df.plot()
# plt.figure()




import xlrd
import pandas as pd
from pandas import DataFrame
import numpy as np
import xlsxwriter
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor

def Q_purchase_price_difference(old_price,new_price):
    try:
        if new_price ==None or (old_price - new_price)<0:
            return None
        else:
            jiagecha = old_price - new_price
            return jiagecha
    except:
        return None
def P_purchase_price_difference(old_price,new_price):
    try:
        if new_price ==None or((old_price - new_price)<0):
            return None
        else:
            jiagecha = old_price - new_price
            return jiagecha
    except:
        return None
    
def eachSKU_gross_profit(grossProfit,saleAmount):
    try:
        if (grossProfit ==None) or (saleAmount ==None):
            return "None"
        else:
            eachSku_gross_profit_money = pd.to_numeric(grossProfit)/pd.to_numeric(saleAmount)
            return eachSku_gross_profit_money
    except:
        return 'xx'
def eachSKU_gross_profit_rate(Molecular,denominator):
    try:
        if (Molecular ==None) or (denominator ==None):
            return "None"
        else:
            eachSku_gross_profit_rate = pd.to_numeric(Molecular)/pd.to_numeric(denominator)
            return eachSku_gross_profit_rate
    except:
        return 'xx'

def evaluate_new_columns(file_address):
    xls_file = file_address
    xl = pd.ExcelFile(xls_file)
    df = pd.read_excel(xls_file)
    print(df.columns)
    df['与平台价格差']= df.apply(lambda df: Q_purchase_price_difference(df['现进价'], df['同平台最优进价']),axis = 1)
    df['与全国价格差']= df.apply(lambda df: P_purchase_price_difference(df['现进价'], df['全国最优进价']),axis = 1)
    df['现进价单品平均毛利额']=df.apply(lambda df: eachSKU_gross_profit(df['毛利额'], df['销售数量']),axis = 1)
    df['平台价格差与毛利额比率']=df.apply(lambda df:  eachSKU_gross_profit_rate(df['与平台价格差'], df['现进价单品平均毛利额']),axis = 1)
    df['全国价格差与毛利额比率']=df.apply(lambda df:  eachSKU_gross_profit_rate(df['与全国价格差'],df['现进价单品平均毛利额']),axis = 1)
    return df
    

def draw_figure(file_address):
    data = pd.read_excel(file_address)
    plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
    plt.rcParams['axes.unicode_minus']=False #用来正常显示负号
    df = pd.DataFrame(data)
    # col_names = df.iloc[1,:]
    # df = df.rename(columns=col_names)
    # df.drop(index=[0,1],axis=0,inplace = True)

    print(df.columns)

    x =pd.to_numeric(df["现进价"])
    y =pd.to_numeric(df['谈判后采最新进价：元（开票价）'])
    result = pd.concat([x,y],axis=1,names=["谈判前进价","谈判后进价"])
    print(result)
    result.plot()
    plt.figure()
    
if __name__ == "__main__":
    
    file_address = r"D:\商采-绩效分析-供应链\比价-进价-跟进\test\py第三轮地采明细汇总_45周.xlsx"
    df = evaluate_new_columns(file_address)
    df.to_excel(r"D:\商采-绩效分析-供应链\比价-进价-跟进\test\test20191210.xlsx",sheet_name="hhh")
    print("over")
    



